
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://jvzfvvnvjyeoiarcgqkf.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2emZ2dm52anllb2lhcmNncWtmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1ODE4MDksImV4cCI6MjA1NzE1NzgwOX0.yVlMq3Z7SV1rfZcIO_QdRO26hwZvAiuZT7iRMMazU3w";

// Export config object for use in components
export const SUPABASE_CONFIG = {
  url: SUPABASE_URL,
  key: SUPABASE_PUBLISHABLE_KEY,
  projectId: "jvzfvvnvjyeoiarcgqkf"
};

// Create and export the supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Offline mode functionality
let _offlineMode = false;

/**
 * Check if the app is in offline mode
 */
export const offlineMode = (): boolean => {
  return _offlineMode;
};

/**
 * Set the offline mode
 */
export const setOfflineMode = (mode: boolean): void => {
  _offlineMode = mode;
  
  // Dispatch an event to notify other components about the change
  const event = new CustomEvent('offlinemodechange', { 
    detail: { offlineMode: mode } 
  });
  window.dispatchEvent(event);
  
  console.log(`Offline mode ${mode ? 'enabled' : 'disabled'}`);
};

/**
 * Check if the browser is online
 */
export const isOnline = (): boolean => {
  return navigator.onLine;
};

/**
 * Test the connection to Supabase
 * This is a simple wrapper for the more detailed function in supabaseConnectionUtils
 * We place it here to avoid circular dependencies
 */
export const testConnection = async () => {
  try {
    // Simple ping to check if Supabase is available
    const startTime = performance.now();
    const { data, error } = await supabase.from('profiles').select('count(*)');
    const endTime = performance.now();
    
    if (error) {
      console.error('Error testing connection:', error);
      return { 
        success: false, 
        error: error.message,
        latency: null
      };
    }
    
    return { 
      success: true, 
      error: null,
      latency: Math.round(endTime - startTime),
      version: "1.0.0" // This could be updated with the actual Supabase version in the future
    };
  } catch (error: any) {
    console.error('Unexpected error testing connection:', error);
    return { 
      success: false, 
      error: error.message || 'Unexpected error',
      latency: null
    };
  }
};
