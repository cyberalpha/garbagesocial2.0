
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://spwqedeingrdydumxuco.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNwd3FlZGVpbmdyZHlkdW14dWNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1NzY1MDAsImV4cCI6MjA1NzE1MjUwMH0.XXfhI-3U6xEw2p1v-ZynaynRcDT9gvC3E25mwe0wheA";

// Configuration object for easier access to Supabase info
export const SUPABASE_CONFIG = {
  url: SUPABASE_URL,
  key: SUPABASE_PUBLISHABLE_KEY,
  projectId: SUPABASE_URL.split('https://')[1].split('.')[0]
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Offline mode functionality
let _offlineMode = false;

export const offlineMode = () => _offlineMode;
export const setOfflineMode = (mode: boolean) => {
  const prevMode = _offlineMode;
  _offlineMode = mode;
  
  // Dispatch event for other components to listen
  if (prevMode !== mode) {
    window.dispatchEvent(new CustomEvent('offlinemodechange', { 
      detail: { offlineMode: mode } 
    }));
  }
  
  return mode;
};

// Browser online status
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Supabase connection test result interface
export interface ConnectionTestResult {
  success: boolean;
  error: any | null;
  latency: number | null;
  version: string | null;
}

// Supabase connection test
export const testConnection = async (): Promise<ConnectionTestResult> => {
  try {
    // Simple ping test to Supabase usando la tabla profiles en lugar de users
    const startTime = performance.now();
    const { data, error } = await supabase.from('profiles').select('count()', { count: 'exact', head: true });
    const endTime = performance.now();
    
    if (error) {
      console.error('Connection test failed:', error);
      return { 
        success: false, 
        error, 
        latency: null, 
        version: null 
      };
    }
    
    return {
      success: true,
      latency: Math.round(endTime - startTime),
      version: 'Supabase',
      error: null
    };
  } catch (error) {
    console.error('Unexpected error testing connection:', error);
    return { 
      success: false, 
      error, 
      latency: null, 
      version: null
    };
  }
};
