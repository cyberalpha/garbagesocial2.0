
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jvzfvvnvjyeoiarcgqkf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2emZ2dm52anllb2lhcmNncWtmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1ODE4MDksImV4cCI6MjA1NzE1NzgwOX0.yVlMq3Z7SV1rfZcIO_QdRO26hwZvAiuZT7iRMMazU3w";

// Supabase configuration object
export const SUPABASE_CONFIG = {
  url: SUPABASE_URL,
  key: SUPABASE_PUBLISHABLE_KEY,
  projectId: "jvzfvvnvjyeoiarcgqkf"
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Offline mode management
let _offlineMode = false;

export const offlineMode = (): boolean => {
  return _offlineMode;
};

export const setOfflineMode = (mode: boolean): void => {
  const oldMode = _offlineMode;
  _offlineMode = mode;
  
  if (oldMode !== mode) {
    // Dispatch event for components to react to offline mode change
    window.dispatchEvent(new CustomEvent('offlinemodechange', { 
      detail: { offlineMode: mode } 
    }));
    console.log(`Offline mode ${mode ? 'enabled' : 'disabled'}`);
  }
};

// Browser online/offline detection
export const isOnline = (): boolean => {
  return typeof navigator !== 'undefined' ? navigator.onLine : true;
};

// Simple connection test function
export const testConnection = async () => {
  // If we're in offline mode, return a simulated failed result
  if (offlineMode()) {
    return { 
      success: false, 
      error: "Modo offline activado", 
      offlineMode: true 
    };
  }
  
  try {
    const { error } = await supabase.from('profiles').select('count()', { count: 'exact', head: true }).limit(1);
    
    if (error) {
      return { 
        success: false, 
        error: error.message,
        offlineMode: false
      };
    }
    
    return { 
      success: true,
      error: null,
      offlineMode: false
    };
  } catch (error: any) {
    return {
      success: false,
      error: error?.message || 'Error checking connection',
      offlineMode: false
    };
  }
};

// Initialize offline mode based on previous state or browser connectivity
const initOfflineMode = () => {
  try {
    // Check local storage for saved preference
    const savedMode = localStorage.getItem('offline_mode');
    if (savedMode !== null) {
      setOfflineMode(savedMode === 'true');
    } else if (!isOnline()) {
      // If browser is offline, automatically enable offline mode
      setOfflineMode(true);
    }
  } catch (e) {
    // If localStorage is not available, default to browser online state
    setOfflineMode(!isOnline());
  }
};

// Initialize on load
initOfflineMode();

// Monitor browser online/offline status
if (typeof window !== 'undefined') {
  window.addEventListener('online', () => {
    console.log('Browser is online');
    // Don't automatically disable offline mode, but notify app that connection is available
    window.dispatchEvent(new CustomEvent('browseronline'));
  });
  
  window.addEventListener('offline', () => {
    console.log('Browser is offline, enabling offline mode');
    setOfflineMode(true);
  });
}
