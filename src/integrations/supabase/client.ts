
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://spwqedeingrdydumxuco.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNwd3FlZGVpbmdyZHlkdW14dWNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1NzY1MDAsImV4cCI6MjA1NzE1MjUwMH0.XXfhI-3U6xEw2p1v-ZynaynRcDT9gvC3E25mwe0wheA";

// Convenience export for config values
export const SUPABASE_CONFIG = {
  url: SUPABASE_URL,
  key: SUPABASE_PUBLISHABLE_KEY
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Offline mode handling
let _offlineMode = false;
let _isOnline = true;

// For testing connection and offline mode management
export const offlineMode = _offlineMode;
export const isOnline = () => _isOnline && navigator.onLine;

// Set offline mode
export const setOfflineMode = (value: boolean) => {
  _offlineMode = value;
  // Dispatch event for components to react
  window.dispatchEvent(
    new CustomEvent('offlinemodechange', { detail: { offlineMode: value } })
  );
};

// Test connection to Supabase
export const testConnection = async (): Promise<{
  success: boolean;
  latency?: number;
  version?: string;
  error?: any;
}> => {
  if (_offlineMode) {
    return { success: false, error: 'Offline mode is enabled' };
  }

  try {
    const startTime = performance.now();
    
    // Simple request to test connection
    const { data, error } = await supabase.from('users').select('count', { count: 'exact', head: true });
    
    const endTime = performance.now();
    const latency = Math.round(endTime - startTime);
    
    if (error) {
      console.error('Supabase connection test failed:', error);
      return {
        success: false,
        latency,
        error
      };
    }
    
    // Connection successful
    return {
      success: true,
      latency,
      version: '1.0.0' // Dummy version for now
    };
  } catch (error) {
    console.error('Unexpected error during connection test:', error);
    return {
      success: false,
      error
    };
  }
};

// Update online status based on browser events
const updateOnlineStatus = () => {
  _isOnline = navigator.onLine;
};

// Add event listeners if in browser environment
if (typeof window !== 'undefined') {
  window.addEventListener('online', updateOnlineStatus);
  window.addEventListener('offline', updateOnlineStatus);
}
