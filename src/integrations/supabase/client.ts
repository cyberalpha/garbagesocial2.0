
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kkiymeuqlznkpiqdedgz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtraXltZXVxbHpua3BpcWRlZGd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzMjYwNjMsImV4cCI6MjA1NjkwMjA2M30.aAsK16xq_dvzYBbj8HfmGGmTX5NUu1Xipe6CwbLDAe0";

// Exportamos la configuración de Supabase para que pueda ser utilizada en otros componentes
export const SUPABASE_CONFIG = {
  url: SUPABASE_URL,
  key: SUPABASE_PUBLISHABLE_KEY
};

// Configuración de opciones avanzadas para mejorar la estabilidad
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
  },
  // Incrementamos los tiempos de espera para redes lentas
  global: {
    headers: {
      'x-application-name': 'wasteless-app'
    },
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      const controller = new AbortController();
      const { signal } = controller;
      
      // Timeout de 30 segundos para peticiones lentas
      const timeoutId = setTimeout(() => controller.abort(), 30000);
      
      return fetch(url, { 
        ...options, 
        signal,
        // Caché agresivo para mejorar rendimiento
        cache: 'default'
      })
        .finally(() => clearTimeout(timeoutId));
    }
  },
  realtime: {
    // Configuración optimizada para realtime
    timeout: 30000,
    heartbeatIntervalMs: 15000
  },
  db: {
    // Aumentar timeout para operaciones de base de datos
    schema: 'public'
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

// Añadimos evento para monitorear la conexión
supabase.auth.onAuthStateChange((event) => {
  console.log("Auth state changed:", event);
  if (event === 'SIGNED_OUT') {
    // Limpiamos la caché local al cerrar sesión
    localStorage.removeItem('supabase-auth');
  }
});

// Función de utilidad para probar la conexión
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    const startTime = Date.now();
    // Hacemos una consulta ligera para probar conexión
    const { error } = await supabase.from('profiles').select('count').limit(1).maybeSingle();
    const latency = Date.now() - startTime;
    
    console.log(`Latencia de Supabase: ${latency}ms`);
    
    if (error) {
      console.error("Error de conexión con Supabase:", error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error al probar conexión con Supabase:", error);
    return false;
  }
};
